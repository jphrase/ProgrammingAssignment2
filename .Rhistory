getwd()
library(ggplot2)
indices<-sample(1000,500)
train<-dat[indices,]
test<-dat[-indices,]
dat<-readcsv("dat.csv")
read.csv("dat.csv")
dat<-read.csv("dat.csv")
indices<-sample(1000,500)
train<-dat[indices,]
test<-dat[-indices,]
ggplot()+
geom_point(data=train,aes(x=x,y=y))+
ggtitle('TRAINING SET')
ggplot()+
geom_point(data=test,aes(x=x,y=y))+
ggtitle('TEST SET')
model<-lm(y~x,data=train)
model
x=4
predict(model,data.frame(x))
x<-c(1,9)
y<-predict(model,data.frame(x))
y
endpoints<-data.fram(x,y)
endpoints<-data.frame(x,y)
endpoints
ggplot()+
geom_point(data=train,aes(x=x,y=y))+
geom_line(data=endpoints,aes(x=x,y=y),color='red',size=1)+
ggtitle('TRAINING SET')
ggplot()+
geom_point(data=test,aes(x=x,y=y))+
geom_line(data=endpoints,aes(x=x,y=y),color='red',size=1)+
ggtitle('TEST SET')
x<-test$x
sum((test$y-predict(model,test))^2)
mean((test$y-predict(model,test))^2)
mse_test<-mean((test$y-predict(model,test))^2)
model<-lm(y~x+I(x^2),data=train)
model
f<-function(x){
return(predict(model,data.frame(x)))
}
ggplot()+
geom_point(data=train,aes(x=x,y=y))+
geom_line(data=endpoints,aes(x=x,y=y),color='red',size=1)+
stat_function(data=data.frame(x=c(1,9)),aes(x=x),fun=f,color='blue',size=1)+
ggtitle('TRAINING SET')
ggplot()+
geom_point(data=test,aes(x=x,y=y))+
geom_line(data=endpoints,aes(x=x,y=y),color='red',size=1)+
stat_function(data=data.frame(x=c(1,9)),aes(x=x),fun=f,color='blue',size=1)+
ggtitle('TEST SET')
mean((test$y-predict(model,test))^2)
for(i in 1:10){
print('hi')
}
for(i in 1:10){
print(i)
}
lm(y~x+I(x^2)+I(x^3),data=train)
lm(y~poly(x,3,raw=TRUE),data=train)
model<-lm(y~poly(x,3,raw=TRUE),data=train)
mse<-mean((test$y-predict(model,test)^2)
mse
model<-lm(y~poly(x,3,raw=TRUE),data=train)
mse<-mean((test$y-predict(model,test)^2)
mse
model<-lm(y~poly(x,3,raw=TRUE),data=train)
mse<-mean((test$y-predict(model,test))^2)
mse
for(i in 1:10){
model<-lm(y~poly(x,3,raw=TRUE),data=train)
mse<-mean((test$y-predict(model,test))^2)
print(mse)
}
for(i in 1:10){
model<-lm(y~poly(x,i,raw=TRUE),data=train)
mse<-mean((test$y-predict(model,test))^2)
print(mse)
}
mse<-numeric()
for(i in 1:10){
model<-lm(y~poly(x,i,raw=TRUE),data=train)
mse[i]<-mean((test$y-predict(model,test))^2)
}
mse
y<-mse
x<-1:10
mse_ploy<-data.frame(x,y)
ggplot()+
geom_point(data=mse_ploy,aes(x=x,y=y),size=2)
ggplot()+
geom_point(data=mse_ploy,aes(x=x,y=y),size=3)
geom_line(data=mse_ploy,aes(x=x,y=y)
ggplot()+
geom_point(data=mse_ploy,aes(x=x,y=y),size=3)
geom_line(data=mse_ploy,aes(x=x,y=y))
ggplot()+
geom_point(data=mse_ploy,aes(x=x,y=y),size=3)+
geom_line(data=mse_ploy,aes(x=x,y=y))
ggplot()+
geom_point(data=mse_ploy,aes(x=x,y=y),size=3)+
geom_line(data=mse_ploy,aes(x=x,y=y))+
xlab('polynomial degree')+
ylab('test MSE')
mse_calc<-function(train,test){
mse<-numeric()
for(i in 1:10){
model<-lm(y~poly(x,i,raw=TRUE),data=train)
mse[i]<-mean((test$y-predict(model,test))^2)
}
return(mse)
}
indices<-sample(1000,500)
train<-dat[indices,]
test<-dat[-indices,]
mse_calc(train,test)
indices<-sample(1000,500)
train<-dat[indices,]
test<-dat[-indices,]
mse_calc(train,test)
for(i in 1:10){
indices<-sample(1000,500)
train<-dat[indices,]
test<-dat[-indices,]
print(mse_calc(train,test))
}
x<-1:10
plot<-ggplot()
for(i in 1:10){
indices<-sample(1000,500)
train<-dat[indices,]
test<-dat[-indices,]
y<-mse_calc(train,test)
mse_poly<data.frame(x,y)
plot<-plot+geom_point(data=mse_poly,aes(x,y),sixe=3)
plot<-plot+geom_line(data=mse_poly,aes(x,y))
}
x<-1:10
plot<-ggplot()
for(i in 1:10){
indices<-sample(1000,500)
train<-dat[indices,]
test<-dat[-indices,]
y<-mse_calc(train,test)
mse_poly<-data.frame(x,y)
plot<-plot+geom_point(data=mse_poly,aes(x,y),sixe=3)
plot<-plot+geom_line(data=mse_poly,aes(x,y))
}
plot
x<-1:10
plot<-ggplot()+ylim(80,125)
for(i in 1:10){
indices<-sample(1000,500)
train<-dat[indices,]
test<-dat[-indices,]
y<-mse_calc(train,test)
mse_poly<-data.frame(x,y)
plot<-plot+geom_point(data=mse_poly,aes(x,y),sixe=3)
plot<-plot+geom_line(data=mse_poly,aes(x,y))
}
plot
install.packages("KernSmooth")
library(KernSmooth)
x <- 1:10
if(x > 5 { x <- 0})
if(x > 5) { x <- 0}
f <- function(x){}
f <- function(x){
g <- function(y){
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x<5) {
NA
} else {
10
}
y
?gl
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
x
str(split(x, list(f1, f2)))
setwd("C:/Users/FHT/Git_Dev/ProgrammingAssignment2")
